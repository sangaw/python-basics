{
  "https://learn.microsoft.com/en-us/azure/virtual-machines/": {
    "Virtual machines in Azure": "Documentation for creating and managing virtual machines in Azure.",
    "Latest features": "",
    "What's new": "Azure BoostHibernationFlexible Virtual Machine Scale Sets OrchestrationCommunity Gallery",
    "Linux quickstarts": "",
    "Quickstart": "Azure portalAzure PowerShellTerraformAzure CLI",
    "Windows quickstarts": "",
    "Self-paced training": "",
    "Training": "Create a Linux virtual machine in AzureCreate a Windows virtual machine in Azure",
    "Troubleshooting": "",
    "How-To Guide": "Troubleshooting GuidesTroubleshoot deployment issuesTroubleshoot allocation failuresTroubleshoot unexpected rebootsMicrosoft Q&A",
    "Architecture": "Azure Well-Architected Framework Virtual Machine considerationsAzure Well-Architected Framework Disk Storage considerationsCloud adoption frameworkAzure architecture center",
    "Resources": "",
    "Overview": "Azure Quickstart templatesPricingRegional availabilityVirtual machines selector tool"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform": {
    "Quickstart: Use Terraform to create a Linux VM": "Article08/22/20243 contributorsFeedback Applies to:âï¸ Linux VMs Article tested with the following Terraform and Terraform provider versions: This article shows you how to create a complete Linux environment and supporting resources with Terraform. Those resources include a virtual network, subnet, public IP address, and more. Terraformenables the definition, preview, and deployment of cloud infrastructure. Using Terraform, you create configuration files usingHCL syntax. The HCL syntax allows you to specify the cloud provider - such as Azure - and the elements that make up your cloud infrastructure. After you create your configuration files, you create anexecution planthat allows you to preview your infrastructure changes before they're deployed. Once you verify the changes, you apply the execution plan to deploy the infrastructure. In this article, you learn how to: Create a random value for the Azure resource group name usingrandom_pet.Create an Azure resource group usingazurerm_resource_group.Create a virtual network (VNET) usingazurerm_virtual_network.Create a subnet usingazurerm_subnet.Create a public IP usingazurerm_public_ip.Create a network security group usingazurerm_network_security_group.Create a network interface usingazurerm_network_interface.Create an association between the network security group and the network interface usingazurerm_network_interface_security_group_association.Generate a random value for a unique storage account name usingrandom_id.Create a storage account for boot diagnostics usingazurerm_storage_account.Create a Linux VM usingazurerm_linux_virtual_machineCreate an AzAPI resourceazapi_resource.Create an AzAPI resource to generate an SSH key pair usingazapi_resource_action.",
    "Prerequisites": "Install and configure Terraform",
    "Implement the Terraform code": "NoteThe sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.See morearticles and sample code showing how to use Terraform to manage Azure resources Create a directory in which to test the sample Terraform code and make it the current directory.Create a file namedproviders.tfand insert the following code:terraform {\n  required_version = \">=0.12\"\n\n  required_providers {\n    azapi = {\n      source  = \"azure/azapi\"\n      version = \"~>1.5\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}Create a file namedssh.tfand insert the following code:resource \"random_pet\" \"ssh_key_name\" {\n  prefix    = \"ssh\"\n  separator = \"\"\n}\n\nresource \"azapi_resource_action\" \"ssh_public_key_gen\" {\n  type        = \"Microsoft.Compute/sshPublicKeys@2022-11-01\"\n  resource_id = azapi_resource.ssh_public_key.id\n  action      = \"generateKeyPair\"\n  method      = \"POST\"\n\n  response_export_values = [\"publicKey\", \"privateKey\"]\n}\n\nresource \"azapi_resource\" \"ssh_public_key\" {\n  type      = \"Microsoft.Compute/sshPublicKeys@2022-11-01\"\n  name      = random_pet.ssh_key_name.id\n  location  = azurerm_resource_group.rg.location\n  parent_id = azurerm_resource_group.rg.id\n}\n\noutput \"key_data\" {\n  value = azapi_resource_action.ssh_public_key_gen.output.publicKey\n}Create a file namedmain.tfand insert the following code:resource \"random_pet\" \"rg_name\" {\n  prefix = var.resource_group_name_prefix\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = random_pet.rg_name.id\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = \"myVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = \"mySubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = \"myPublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = \"myNetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = \"myNIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"my_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = \"diag${random_id.random_id.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# Create virtual machine\nresource \"azurerm_linux_virtual_machine\" \"my_terraform_vm\" {\n  name                  = \"myVM\"\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.my_terraform_nic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = \"myOsDisk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"0001-com-ubuntu-server-jammy\"\n    sku       = \"22_04-lts-gen2\"\n    version   = \"latest\"\n  }\n\n  computer_name  = \"hostname\"\n  admin_username = var.username\n\n  admin_ssh_key {\n    username   = var.username\n    public_key = azapi_resource_action.ssh_public_key_gen.output.publicKey\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint\n  }\n}Create a file namedvariables.tfand insert the following code:variable \"resource_group_location\" {\n  type        = string\n  default     = \"eastus\"\n  description = \"Location of the resource group.\"\n}\n\nvariable \"resource_group_name_prefix\" {\n  type        = string\n  default     = \"rg\"\n  description = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}\n\nvariable \"username\" {\n  type        = string\n  description = \"The username for the local account that will be created on the new VM.\"\n  default     = \"azureadmin\"\n}Create a file namedoutputs.tfand insert the following code:output \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"public_ip_address\" {\n  value = azurerm_linux_virtual_machine.my_terraform_vm.public_ip_address\n}",
    "Initialize Terraform": "Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources. terraform init -upgrade Key points: The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.",
    "Create a Terraform execution plan": "Runterraform planto create an execution plan. terraform plan -out main.tfplan Key points: Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.",
    "Apply a Terraform execution plan": "Runterraform applyto apply the execution plan to your cloud infrastructure. terraform apply main.tfplan Key points: The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.If you didn't use the-outparameter, callterraform applywithout any parameters. Cost information isn't presented during the virtual machine creation process for Terraform like it is for theAzure portal. If you want to learn more about how cost works for virtual machines, see theCost optimization Overview page.",
    "Verify the results": "Azure CLIAzure PowerShellGet the Azure resource group name.resource_group_name=$(terraform output -raw resource_group_name)Runaz vm listwith aJMESPathquery to display the names of the virtual machines created in the resource group.az vm list \\\n  --resource-group $resource_group_name \\\n  --query \"[].{\\\"VM Name\\\":name}\" -o tableGet the Azure resource group name.$resource_group_name=$(terraform output -raw resource_group_name)RunGet-AzVmto display the names of all the virtual machines in the resource group.Get-AzVm -ResourceGroupName $resource_group_name",
    "Clean up resources": "When you no longer need the resources created via Terraform, do the following steps: Runterraform planand specify thedestroyflag.terraform plan -destroy -out main.destroy.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.Runterraform applyto apply the execution plan.terraform apply main.destroy.tfplan",
    "Troubleshoot Terraform on Azure": "Troubleshoot common problems when using Terraform on Azure",
    "Next steps": "In this quickstart, you deployed a simple virtual machine using Terraform. To learn more about Azure virtual machines, continue to the tutorial for Linux VMs. Azure Linux virtual machine tutorials"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal": {
    "Quickstart: Create a Windows virtual machine in the Azure portal": "Article01/22/202527 contributorsFeedback Applies to:âï¸ Windows VMs Azure virtual machines (VMs) can be created through the Azure portal. This method provides a browser-based user interface to create VMs and their associated resources. This quickstart shows you how to use the Azure portal to deploy a virtual machine (VM) in Azure that runs Windows Server 2022 Datacenter. To see your VM in action, you then RDP to the VM and install the IIS web server. If you don't have an Azure subscription, create afree accountbefore you begin. ImportantThe steps outlined in this quickstart are solely for education purposes and aren't intended for deployments to a production environment.",
    "Sign in to Azure": "Sign in to theAzure portal.",
    "Create virtual machine": "Entervirtual machinesin the search.UnderServices, selectVirtual machines.In theVirtual machinespage, selectCreateand thenAzure virtual machine. TheCreate a virtual machinepage opens.UnderInstance details, entermyVMfor theVirtual machine nameand chooseWindows Server 2022 Datacenter: Azure Edition - x64 Gen 2for theImage. Leave the other defaults.NoteSome users will now see the option to create VMs in multiple zones. To learn more about this new capability, seeCreate virtual machines in an availability zone.UnderAdministrator account,  provide a username, such asazureuserand a password. The password must be at least 12 characters long and meet thedefined complexity requirements.UnderInbound port rules, chooseAllow selected portsand then selectRDP (3389)andHTTP (80)from the drop-down.Leave the remaining defaults and then select theReview + createbutton at the bottom of the page.After validation runs, select theCreatebutton at the bottom of the page.After deployment is complete, selectGo to resource.",
    "Connect to virtual machine": "Create a remote desktop connection to the virtual machine. These directions tell you how to connect to your VM from a Windows computer. On a Mac, you need an RDP client such as thisRemote Desktop Clientfrom the Mac App Store. On the overview page for your virtual machine, select theConnect>RDP.In theConnect with RDPtab, keep the default options to connect by IP address, over port 3389, and clickDownload RDP file.Open the downloaded RDP file and clickConnectwhen prompted.In theWindows Securitywindow, selectMore choicesand thenUse a different account. Type the username aslocalhost\\username, enter the password you created for the virtual machine, and then clickOK.You may receive a certificate warning during the sign-in process. ClickYesorContinueto create the connection.",
    "Install web server": "To see your VM in action, install the IIS web server. Open a PowerShell prompt on the VM and run the following command: Install-WindowsFeature -name Web-Server -IncludeManagementTools When done, close the RDP connection to the VM.",
    "View the IIS welcome page": "In the portal, select the VM and in the overview of the VM, hover over the IP address to showCopy to clipboard. Copy the IP address and paste it into a browser tab. The default IIS welcome page will open, and should look like this:",
    "Clean up resources": "",
    "Delete resources": "When no longer needed, you can delete the resource group, virtual machine, and all related resources. On the Overview page for the VM, select theResource grouplink.At the top of the page for the resource group, selectDelete resource group.A page will open warning you that you are about to delete resources. Type the name of the resource group and selectDeleteto finish deleting the resources and the resource group.",
    "Auto-shutdown": "If the VM is still needed, Azure provides an Auto-shutdown feature for virtual machines to help manage costs and ensure you are not billed for unused resources. On theOperationssection for the VM, select theAuto-shutdownoption.A page will open where you can configure the auto-shutdown time. Select theOnoption to enable and then set a time that works for you.Once you have set the time, selectSaveat the top to enable your Auto-shutdown configuration. NoteRemember to configure the time zone correctly to match your requirements, as (UTC) Coordinated Universal Time is the default setting in the Time zone dropdown. For more information seeAuto-shutdown.",
    "Next steps": "In this quickstart, you deployed a simple virtual machine, opened a network port for web traffic, and installed a basic web server. To learn more about Azure virtual machines, continue to the tutorial for Windows VMs. Azure Windows virtual machine tutorials"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/hibernate-resume": {
    "Hibernation for Azure virtual machines": "Article03/18/20256 contributorsFeedback Applies to:âï¸ Linux VMs âï¸ Windows VMs Hibernation allows you to pause VMs that aren't being used and save on compute costs. It's an effective cost management feature for scenarios such as: Virtual desktops, dev/test servers, and other scenarios where the VMs don't need to run 24/7.Systems with long boot times due to memory intensive applications. These applications can be initialized on VMs and hibernated. These âprewarmedâ VMs can then be quickly started when needed, with the applications already up and running in the desired state.",
    "How hibernation works": "When you hibernate a VM, Azure signals the VM's operating system to perform a suspend-to-disk action. Azure stores the memory contents of the VM in the OS disk, then deallocates the VM. When the VM is started again, the memory contents are transferred from the OS disk back into memory. Applications and processes that were previously running in your VM resume from the state prior to hibernation. Once a VM is in a hibernated state, you aren't billed for the VM usage. Your account is only billed for the storage (OS disk, data disks) and networking resources (IPs, etc.) attached to the VM. When hibernating a VM: Hibernation is triggered on a VM using the Azure portal, CLI, PowerShell, SDKs, or APIs. Azure then signals the guest operating system to perform suspend-to-disk (S4).The VM's memory contents are stored on the OS disk. The VM is then deallocated, releases the lease on the underlying hardware, and is powered off. Refer to VMstates and billingfor more details on the VM deallocated state.Data in the temporary disk isn't persisted.The OS disk, data disks, and NICs remain attached to your VM. Any static IPs remain unchanged.You aren't billed for the VM usage for a hibernated VM.You continue to be billed for the storage and networking resources associated with the hibernated VM.",
    "Supported configurations": "Hibernation support is limited to certain VM sizes and OS versions. Make sure you have a supported configuration before using hibernation.",
    "Supported operating systems": "Supported operating systems, OS specific limitations, and configuration procedures are listed in the OS's documentation section. Windows VM hibernation documentation Linux VM hibernation documentation",
    "Supported VM sizes": "VM sizes with up to 64-GB RAM from the following General Purpose VM series support hibernation. Dasv5-seriesDadsv5-seriesDsv5-seriesDdsv5-seriesEasv5-seriesEadsv5-seriesEsv5-seriesEdsv5-series VM sizes with up to 112-GB RAM from the following GPU VM series support hibernation. NVv4-seriesNVadsA10v5-series If you are using any UVM-enabled compute applications, we recommend idling the application before initiating hibernation.",
    "General limitations": "You can resize VMs that have hibernation enabled, but not when the VM is in aHibernatedstate. The VM should either be in aRunningorStoppedstate.Hibernation is only supported with Nested Virtualization when Trusted Launch is enabled on the VMWhen a VM is hibernated, you can't attach, detach, or modify any disks or NICs associated with the VM. The VM must instead be moved to a Stop-Deallocated state.When a VM is hibernated, there's no capacity guarantee to ensure that there's sufficient capacity to start the VM later. In the rare case that you encounter capacity issues, you can try starting the VM at a later time. Capacity reservations don't guarantee capacity for hibernated VMs.You can only hibernate a VM using the Azure portal, CLI, PowerShell, SDKs and API. Hibernating the VM using guest OS operations don't result in the VM moving to a hibernated state and the VM continues to be billed.",
    "Azure feature limitations": "Ephemeral OS disksShared disksAvailability SetsVirtual Machine Scale Sets in Uniform orchestration mode are not supported. Virtual Machine Scale Sets inFlexible orchestration modeare supported.Spot VMsManaged imagesAzure BackupCapacity reservations",
    "Prerequisites to use hibernation": "Hibernation must be enabled on your VM.A persistent OS disk large enough to store the contents of the RAM, OS and other applications running on the VM is connected.The VM size supports hibernation.The VM OS supports hibernation.The Azure VM Agent is installed if you're using the Windows or Linux Hibernate Extensions.If a VM is being created from an OS disk or a Compute Gallery image, then the OS disk or Gallery Image definition supports hibernation.",
    "Setting up hibernation": "Enabling hibernation is detailed in the OS specific setup and configuration documentation:",
    "Linux VMs": "To configure hibernation on a Linux VM, check out theLinux hibernation documentation.",
    "Windows VMs": "To configure hibernation on a Windows VM, check out theWindows hibernation documentation.",
    "Troubleshooting": "Refer to theHibernation troubleshooting guidefor general troubleshooting information. Refer to theWindows hibernation troubleshooting guidefor issues with Windows guest hibernation. Refer to theLinux hibernation troubleshooting guidefor issues with Linux guest hibernation.",
    "FAQs": "What are the charges for using this feature?Once a VM is placed in a hibernated state, you aren't charged for the VM, just like how you aren't charged for VMs in a stop (deallocated) state. You're only charged for the OS disk, data disks and any static IPs associated with the VM.Can I enable hibernation on existing VMs?Yes, you can enable hibernation on existing VMs.Can I resize a VM with hibernation enabled?Yes, you can resize a VM with hibernation enabled. You cannot resize the VM if it's in aHibernatedstate. Move the VM to either aRunningorStoppedstate before resizing.Can I modify a VM once it is in a hibernated state?No, once a VM is in a hibernated state, you can't perform actions like resizing the VM and modifying the disks. Additionally, you can't detach any disks or networking resources that are currently attached to the VM or attach new resources to the VM. You can however stop(deallocate) or delete the VM if you want to detach these resources.What is the difference between stop(deallocating) and hibernating a VM?When you stop(deallocate) a VM, the VM shuts down without persisting the memory contents. You can resize stop(deallocated) VMs and detach/attach disks to the VM.When you hibernate a VM, the memory contents are first persisted in the OS disk, then the VM hibernates. You can't resize VMs in a hibernated state, nor detach/attach disks and networking resources to the VM.Can I initiate hibernation from within the VM?To hibernate a VM you should use the Azure portal, CLI, PowerShell commands, SDKs and APIs. Triggering hibernation from inside the VM still results in your VM being billed for the compute resources.When a VM is hibernated, is there a capacity assurance at the time of starting the VM?No, there's no capacity assurance for starting hibernated VMs. In rare scenarios if you encounter a capacity issue, then you can try starting the VM at a later time.",
    "Next steps": "Learn more about Azure billingLearn about Azure Virtual DesktopLook into Azure VM Sizes"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/flexible-virtual-machine-scale-sets": {
    "What are Virtual Machine Scale Sets?": "Article03/21/202513 contributorsFeedback Azure Virtual Machine Scale Sets let you create and manage a group of load balanced virtual machines (VM) instances. The number of VM instances can automatically increase or decrease in response to demand or a defined schedule. Scale sets provide the following key benefits: Easy to create and manage multiple VMsProvides high availability and application resiliency by distributing VMs across availability zones or fault domainsAllows your application to automatically scale as resource demand changesWorks at large-scale With Flexible orchestration, Azure provides a unified experience across the Azure VM ecosystem. Flexible orchestration offers high availability guarantees (up to 1,000 VMs) by spreading VMs across fault domains in a region or within an Availability Zone. This enables you to scale out your application while maintaining fault domain isolation that is essential to run workloads, including: Quorum-based workloadsOpen-source databasesStateful applicationsServices that require high availability and large scaleServices that want to mix virtual machine types or use Spot and on-demand VMs togetherExisting Availability Set applications Learn more about the differences between Uniform scale sets and Flexible scale sets inOrchestration Modes. ImportantThe orchestration mode is defined when you create the scale set and cannot be changed or updated later.",
    "Why use Virtual Machine Scale Sets?": "To provide redundancy and improved performance, applications are typically distributed across multiple instances. Customers may access your application through a load balancer that distributes requests to one of the application instances. If you need to perform maintenance or update an application instance, your customers must be distributed to another available application instance. To keep up with extra customer demand, you may need to increase the number of application instances that run your application. Azure Virtual Machine Scale Sets provide the management capabilities for applications that run across many VMs, automatic scaling of resources, and load balancing of traffic. Scale sets provide the following key benefits: Easy to create and manage multiple VMsWhen you have many VMs that run your application, it's important to maintain a consistent configuration across your environment. For reliable performance of your application, the VM size, disk configuration, and application installs should match across all VMs.With scale sets, all VM instances are created from the same base OS image and configuration. This approach lets you easily manage hundreds of VMs without extra configuration tasks or network management.Scale sets support the use of theAzure load balancerfor basic layer-4 traffic distribution, andAzure Application Gatewayfor more advanced layer-7 traffic distribution and TLS termination.Provides high availability and application resiliencyScale sets are used to run multiple instances of your application. If one of these VM instances has a problem, customers continue to access your application through one of the other VM instances with minimal interruption.For more availability, you can useAvailability Zonesto automatically distribute VM instances in a scale set within a single datacenter or across multiple datacenters. A scale set alone can't protect you against data center failures. Deploying VMs across Availability Zones within a scale set can protect you against data center failure.Allows your application to automatically scale as resource demand changesCustomer demand for your application may change throughout the day or week. To match customer demand, scale sets can automatically increase the number of VM instances as application demand increases, then reduce the number of VM instances as demand decreases.Autoscale helps reduce the number of unnecessary VMs when demand is low. As demand increases, the scale set automatically adds more VMs to maintain an acceptable level of performance for your application. This ability helps reduce costs and efficiently create Azure resources as required.Works at large-scaleScale sets support up to 1,000 VM instances for standard marketplace images and custom images through the Azure Compute Gallery (formerly known as Shared Image Gallery). If you create a scale set using a managed image, the limit is 600 VM instances.For the best performance with production workloads, useAzure Managed Disks.Cost-effective serviceThere's no extra cost for using scale sets. You're charged based on the compute, network, and storage resources that the scale set uses.For virtual machine pricing information, seeAzure pricing.",
    "Next steps": "Flexible orchestration mode for your scale sets with Azure portal."
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-powershell": {
    "Quickstart: Create a Linux virtual machine in Azure with PowerShell": "Article08/22/202423 contributorsFeedback Applies to:âï¸ Linux VMs The Azure PowerShell module is used to create and manage Azure resources from the PowerShell command line or in scripts. This quickstart shows you how to use the Azure PowerShell module to deploy a Linux virtual machine (VM) in Azure. This quickstart uses the latest Debian marketplace image. To see your VM in action, you'll also SSH to the VM and install the NGINX web server. If you don't have an Azure subscription, create afree accountbefore you begin.",
    "Launch Azure Cloud Shell": "The Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account. To open the Cloud Shell, just selectTry itfrom the upper right corner of a code block. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and press enter to run it.",
    "Create a resource group": "Create an Azure resource group withNew-AzResourceGroup. A resource group is a logical container into which Azure resources are deployed and managed: New-AzResourceGroup -Name 'myResourceGroup' -Location 'EastUS'",
    "Create a virtual machine": "We will be automatically generating an SSH key pair to use for connecting to the VM. The public key that is created using-GenerateSshKeywill be stored in Azure as a resource, using the name you provide asSshKeyName. The SSH key resource can be reused for creating additional VMs. Both the public and private keys will also be downloaded for you. When you create your SSH key pair using the Cloud Shell, the keys are stored in astorage account that is automatically created by Cloud Shell. Don't delete the storage account, or the file share in it, until after you have retrieved your keys or you will lose access to the VM. You will be prompted for a user name that will be used when you connect to the VM. You will also be asked for a password, which you can leave blank. Password log in for the VM is disabled when using an SSH key. In this example, you create a VM namedmyVM, inEast US, using theStandard_B2sVM size. New-AzVm `\n    -ResourceGroupName 'myResourceGroup' `\n    -Name 'myVM' `\n    -Location 'East US' `\n    -image Debian11 `\n    -size Standard_B2s `\n    -PublicIpAddressName myPubIP `\n    -OpenPorts 80 `\n    -GenerateSshKey `\n    -SshKeyName mySSHKey The output will give you the location of the local copy of the SSH key. For example: Private key is saved to /home/user/.ssh/1234567891\nPublic key is saved to /home/user/.ssh/1234567891.pub Cost information isn't presented during the virtual machine creation process for PowerShell like it is for theAzure portal. If you want to learn more about how cost works for virtual machines, see theCost optimization Overview page. It will take a few minutes for your VM to be deployed. When the deployment is finished, move on to the next section.",
    "Install NGINX": "To see your VM in action, install the NGINX web server. Invoke-AzVMRunCommand `\n   -ResourceGroupName 'myResourceGroup' `\n   -Name 'myVM' `\n   -CommandId 'RunShellScript' `\n   -ScriptString 'sudo apt-get update && sudo apt-get install -y nginx' The-ScriptStringparameter requires version4.27.0or later of theAz.Computemodule.",
    "View the web server in action": "Get the public IP address of your VM: Get-AzPublicIpAddress -Name myPubIP -ResourceGroupName myResourceGroup | select \"IpAddress\" Use a web browser of your choice to view the default NGINX welcome page. Enter the public IP address of the VM as the web address.",
    "Clean up resources": "When no longer needed, you can use theRemove-AzResourceGroupcmdlet to remove the resource group, VM, and all related resources: Remove-AzResourceGroup -Name 'myResourceGroup'",
    "Next steps": "In this quickstart, you deployed a simple virtual machine, created a Network Security Group and rule, and installed a basic web server. To learn more about Azure virtual machines, continue to the tutorial for Linux VMs. Azure Linux virtual machine tutorials"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-terraform": {
    "Quickstart: Use Terraform to create a Windows VM": "Article08/28/20246 contributorsFeedback Applies to:âï¸ Windows VMs This article shows you how to create a complete Windows environment and supporting resources with Terraform. Those resources include a virtual network, subnet, public IP address, and more. Terraformenables the definition, preview, and deployment of cloud infrastructure. Using Terraform, you create configuration files usingHCL syntax. The HCL syntax allows you to specify the cloud provider - such as Azure - and the elements that make up your cloud infrastructure. After you create your configuration files, you create anexecution planthat allows you to preview your infrastructure changes before they're deployed. Once you verify the changes, you apply the execution plan to deploy the infrastructure. In this article, you learn how to: Create a random value for the Azure resource group name usingrandom_pet.Create an Azure resource group usingazurerm_resource_group.Create a virtual network (VNET) usingazurerm_virtual_network.Create a subnet usingazurerm_subnet.Create a public IP usingazurerm_public_ip.Create a network security group usingazurerm_network_security_group.Create a network interface usingazurerm_network_interface.Create an association between the network security group and the network interface usingazurerm_network_interface_security_group_association.Generate a random value for a unique storage account name usingrandom_id.Create a storage account for boot diagnostics usingazurerm_storage_account.Create a Windows VM with an IIS web server usingazurerm_windows_virtual_machine.Create a Windows VM extension usingazurerm_virtual_machine_extension.",
    "Prerequisites": "Azure subscription: If you don't have an Azure subscription, create afree accountbefore you begin. Install and configure Terraform",
    "Implement the Terraform code": "NoteThe sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.See morearticles and sample code showing how to use Terraform to manage Azure resources Create a directory in which to test the sample Terraform code and make it the current directory.Create a file namedproviders.tfand insert the following code:terraform {\n  required_version = \">=1.0\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}Create a file namedmain.tfand insert the following code:resource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = \"${random_pet.prefix.id}-rg\"\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = \"${random_pet.prefix.id}-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = \"${random_pet.prefix.id}-subnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = \"${random_pet.prefix.id}-public-ip\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create Network Security Group and rules\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = \"${random_pet.prefix.id}-nsg\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"RDP\"\n    priority                   = 1000\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"3389\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n  security_rule {\n    name                       = \"web\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"80\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = \"${random_pet.prefix.id}-nic\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"my_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = \"diag${random_id.random_id.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n\n# Create virtual machine\nresource \"azurerm_windows_virtual_machine\" \"main\" {\n  name                  = \"${var.prefix}-vm\"\n  admin_username        = \"azureuser\"\n  admin_password        = random_password.password.result\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.my_terraform_nic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = \"myOsDisk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2022-datacenter-azure-edition\"\n    version   = \"latest\"\n  }\n\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint\n  }\n}\n\n# Install IIS web server to the virtual machine\nresource \"azurerm_virtual_machine_extension\" \"web_server_install\" {\n  name                       = \"${random_pet.prefix.id}-wsi\"\n  virtual_machine_id         = azurerm_windows_virtual_machine.main.id\n  publisher                  = \"Microsoft.Compute\"\n  type                       = \"CustomScriptExtension\"\n  type_handler_version       = \"1.8\"\n  auto_upgrade_minor_version = true\n\n  settings = <<SETTINGS\n    {\n      \"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted Install-WindowsFeature -Name Web-Server -IncludeAllSubFeature -IncludeManagementTools\"\n    }\n  SETTINGS\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\nresource \"random_password\" \"password\" {\n  length      = 20\n  min_lower   = 1\n  min_upper   = 1\n  min_numeric = 1\n  min_special = 1\n  special     = true\n}\n\nresource \"random_pet\" \"prefix\" {\n  prefix = var.prefix\n  length = 1\n}Create a file namedvariables.tfand insert the following code:variable \"resource_group_location\" {\n  default     = \"eastus\"\n  description = \"Location of the resource group.\"\n}\n\nvariable \"prefix\" {\n  type        = string\n  default     = \"win-vm-iis\"\n  description = \"Prefix of the resource name\"\n}Create a file namedoutputs.tfand insert the following code:output \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"public_ip_address\" {\n  value = azurerm_windows_virtual_machine.main.public_ip_address\n}\n\noutput \"admin_password\" {\n  sensitive = true\n  value     = azurerm_windows_virtual_machine.main.admin_password\n}",
    "Initialize Terraform": "Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources. terraform init -upgrade Key points: The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.",
    "Create a Terraform execution plan": "Runterraform planto create an execution plan. terraform plan -out main.tfplan Key points: Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.",
    "Apply a Terraform execution plan": "Runterraform applyto apply the execution plan to your cloud infrastructure. terraform apply main.tfplan Key points: The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.If you didn't use the-outparameter, callterraform applywithout any parameters. Cost information isn't presented during the virtual machine creation process for Terraform like it is for theAzure portal. If you want to learn more about how cost works for virtual machines, see theCost optimization Overview page.",
    "Verify the results": "Run the following command to get the VM's public IP address and make note of it:echo $(terraform output -raw public_ip_address)With IIS installed and port 80 now open on your VM from the Internet, use a web browser of your choice to view the default IIS welcome page. Use the public IP address of your VM obtained from the previous command. The following example shows the default IIS web site:",
    "Clean up resources": "When you no longer need the resources created via Terraform, do the following steps: Runterraform planand specify thedestroyflag.terraform plan -destroy -out main.destroy.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.Runterraform applyto apply the execution plan.terraform apply main.destroy.tfplan",
    "Troubleshoot Terraform on Azure": "Troubleshoot common problems when using Terraform on Azure",
    "Next steps": "In this quickstart, you deployed a simple virtual machine using Terraform. To learn more about Azure virtual machines, continue to the tutorial for Linux VMs. Azure Windows virtual machine tutorials"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-cli": {
    "Quickstart: Create a Windows virtual machine with the Azure CLI": "Article08/22/202426 contributorsFeedback Applies to:âï¸ Windows VMs The Azure CLI is used to create and manage Azure resources from the command line or in scripts. This quickstart shows you how to use the Azure CLI to deploy a virtual machine (VM) in Azure that runs Windows Server 2022. To see your VM in action, you then RDP to the VM and install the IIS web server. If you don't have an Azure subscription, create afree accountbefore you begin.",
    "Launch Azure Cloud Shell": "The Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account. To open the Cloud Shell, just selectTry itfrom the upper right corner of a code block. You can also launch Cloud Shell in a separate browser tab by going tohttps://shell.azure.com/bash. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and pressEnterto run it.",
    "Create a resource group": "Create a resource group with theaz group createcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed. The following example creates a resource group namedmyResourceGroupin theWest US 3location. Replace the value of the variables as needed. resourcegroup=\"myResourceGroupCLI\"\nlocation=\"westus3\"\naz group create --name $resourcegroup --location $location",
    "Create virtual machine": "Create a VM withaz vm create. The following example creates a VM namedmyVM. This example usesazureuserfor an administrative user name. Replace the values of the variables as needed. You'll be prompted to supply a password that meets thepassword requirements for Azure VMs. Using the example below, you'll be prompted to enter a password at the command line. You could also add the--admin-passwordparameter with a value for your password. The user name and password will be used when you connect to the VM. vmname=\"myVM\"\nusername=\"azureuser\"\naz vm create \\\n    --resource-group $resourcegroup \\\n    --name $vmname \\\n    --image Win2022AzureEditionCore \\\n    --public-ip-sku Standard \\\n    --admin-username $username It takes a few minutes to create the VM and supporting resources. The following example output shows the VM create operation was successful. {\n  \"fqdns\": \"\",\n  \"id\": \"/subscriptions/<guid>/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM\",\n  \"location\": \"westus3\",\n  \"macAddress\": \"00-0D-3A-23-9A-49\",\n  \"powerState\": \"VM running\",\n  \"privateIpAddress\": \"10.0.0.4\",\n  \"publicIpAddress\": \"52.174.34.95\",\n  \"resourceGroup\": \"myResourceGroupCLI\"\n  \"zones\": \"\"\n} Take a note your ownpublicIpAddressin the output when you create your VM. This IP address is used to access the VM later in this article. Cost information isn't presented during the virtual machine creation process for CLI like it is for theAzure portal. If you want to learn more about how cost works for virtual machines, see theCost optimization Overview page.",
    "Install web server": "To see your VM in action, install the IIS web server. az vm run-command invoke -g $resourcegroup \\\n   -n $vmname \\\n   --command-id RunPowerShellScript \\\n   --scripts \"Install-WindowsFeature -name Web-Server -IncludeManagementTools\"",
    "Open port 80 for web traffic": "By default, only RDP connections are opened when you create a Windows VM in Azure. Useaz vm open-portto open TCP port 80 for use with the IIS web server: az vm open-port --port 80 --resource-group $resourcegroup --name $vmname",
    "View the web server in action": "With IIS installed and port 80 now open on your VM from the Internet, use a web browser of your choice to view the default IIS welcome page. Use the public IP address of your VM obtained in a previous step. The following example shows the default IIS web site:",
    "Clean up resources": "When no longer needed, you can use theaz group deletecommand to remove the resource group, VM, and all related resources: az group delete --name $resourcegroup",
    "Next steps": "In this quickstart, you deployed a simple virtual machine, open a network port for web traffic, and installed a basic web server. To learn more about Azure virtual machines, continue to the tutorial for Windows VMs. Azure Windows virtual machine tutorials"
  },
  "https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-cli": {
    "Quickstart: Create a Linux virtual machine with the Azure CLI on Azure": "Article09/19/202428 contributorsFeedback Applies to:âï¸ Linux VMs This quickstart shows you how to use the Azure CLI to deploy a Linux virtual machine (VM) in Azure. The Azure CLI is used to create and manage Azure resources via either the command line or scripts. If you don't have an Azure subscription, create afree accountbefore you begin.",
    "Launch Azure Cloud Shell": "The Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account. To open the Cloud Shell, just selectTry itfrom the upper right corner of a code block. You can also open Cloud Shell in a separate browser tab by going tohttps://shell.azure.com/bash. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and selectEnterto run it. If you prefer to install and use the CLI locally, this quickstart requires Azure CLI version 2.0.30 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.",
    "Log in to Azure using the CLI": "In order to run commands in Azure using the CLI, you need to log in first. Log in using theaz logincommand.",
    "Create a resource group": "A resource group is a container for related resources. All resources must be placed in a resource group. Theaz group createcommand creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. export RANDOM_ID=\"$(openssl rand -hex 3)\"\nexport MY_RESOURCE_GROUP_NAME=\"myVMResourceGroup$RANDOM_ID\"\nexport REGION=EastUS\naz group create --name $MY_RESOURCE_GROUP_NAME --location $REGION Results: {\n  \"id\": \"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup\",\n  \"location\": \"eastus\",\n  \"managedBy\": null,\n  \"name\": \"myVMResourceGroup\",\n  \"properties\": {\n    \"provisioningState\": \"Succeeded\"\n  },\n  \"tags\": null,\n  \"type\": \"Microsoft.Resources/resourceGroups\"\n}",
    "Create the virtual machine": "To create a VM in this resource group, use thevm createcommand. The following example creates a VM and adds a user account. The--generate-ssh-keysparameter causes the CLI to look for an available ssh key in~/.ssh. If one is found, that key is used. If not, one is generated and stored in~/.ssh. The--public-ip-sku Standardparameter ensures that the machine is accessible via a public IP address. Finally, we deploy the latestUbuntu 22.04image. All other values are configured using environment variables. export MY_VM_NAME=\"myVM$RANDOM_ID\"\nexport MY_USERNAME=azureuser\nexport MY_VM_IMAGE=\"Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest\"\naz vm create \\\n    --resource-group $MY_RESOURCE_GROUP_NAME \\\n    --name $MY_VM_NAME \\\n    --image $MY_VM_IMAGE \\\n    --admin-username $MY_USERNAME \\\n    --assign-identity \\\n    --generate-ssh-keys \\\n    --public-ip-sku Standard It takes a few minutes to create the VM and supporting resources. The following example output shows the VM create operation was successful. Results: {\n  \"fqdns\": \"\",\n  \"id\": \"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM\",\n  \"location\": \"eastus\",\n  \"macAddress\": \"00-0D-3A-10-4F-70\",\n  \"powerState\": \"VM running\",\n  \"privateIpAddress\": \"10.0.0.4\",\n  \"publicIpAddress\": \"52.147.208.85\",\n  \"resourceGroup\": \"myVMResourceGroup\",\n  \"zones\": \"\"\n}",
    "Enable Azure AD Login for a Linux virtual machine in Azure": "The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. az vm extension set \\\n    --publisher Microsoft.Azure.ActiveDirectory \\\n    --name AADSSHLoginForLinux \\\n    --resource-group $MY_RESOURCE_GROUP_NAME \\\n    --vm-name $MY_VM_NAME",
    "Store IP address of VM in order to SSH": "Run the following command to store the IP address of the VM as an environment variable: export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)",
    "SSH into the VM": "You can now SSH into the VM by running the output of the following command in your ssh client of choice: ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS",
    "Next Steps": "Learn about virtual machinesUse Cloud-Init to initialize a Linux VM on first bootCreate custom VM imagesLoad Balance VMs"
  },
  "https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/welcome-deployment-troubleshooting": {
    "VM deployment issues": "Welcome to VM deployment issues. These articles explain how to determine, diagnose, and fix issues that you might encounter when you deploy an Azure Virtual Machine. In the navigation pane on the left, browse through the article list or use the search box to find issues and solutions.",
    "New Deployment Planning": "",
    "How-To Guide": "Troubleshooting Azure VM allocation failuresTroubleshoot common deployment errors - Azure Resource ManagerQuota errors - Azure Resource ManagerSKU not available errors - Azure Resource ManagerTroubleshoot deploying Windows virtual machine issues in AzureInvalid template errors - Azure Resource ManagerRequestDisallowedByPolicy error - Azure Resource Manager",
    "Image Deployment & Management": "",
    "Troubleshoot Deployment Failures": ""
  }
}